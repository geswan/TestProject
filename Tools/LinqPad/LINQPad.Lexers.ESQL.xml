<SyntaxLanguage Key="ESQL" LanguageDefinitionVersion="4.0" Secure="True" WordContainsAdditionalCharacters="@_"
			SyntaxLanguageTypeName="LINQPad.Lexers.ESqlDynamicSyntaxLanguage, LINQPad"
			xmlns="http://ActiproSoftware/SyntaxEditor/4.0/LanguageDefinition">

	<!-- Highlighting Styles -->
	<Styles>
		<Style Key="GoStyle" ForeColor="Gray" Bold="True" />
		<Style Key="ReservedWordStyle" ForeColor="Blue" />
		<Style Key="FunctionStyle" ForeColor="Magenta" />
		<Style Key="OperatorStyle" ForeColor="Gray" />
		<Style Key="DataTypeStyle" ForeColor="Blue" />
		<Style Key="VariableStyle" ForeColor="#2B91AF" />
		<Style Key="SystemVariableStyle" ForeColor="Magenta" />
		<Style Key="NumberStyle" ForeColor="Black"/>
		<Style Key="StringDelimiterStyle" ForeColor="#DC1414" />
		<Style Key="StringDefaultStyle" ForeColor="#DC1414" />
		<Style Key="SquareStringDelimiterStyle" ForeColor="#A31515" />
		<Style Key="SquareStringDefaultStyle" ForeColor="#A31515" />
		<Style Key="CommentDelimiterStyle" ForeColor="Green" />
		<Style Key="CommentDefaultStyle" ForeColor="Green" />
	</Styles>

	<!-- States -->
	<States>
		<!-- Code -->
		<State Key="DefaultState">
			<!-- Patterns Groups -->
			<PatternGroups>
				<!-- Whitespace -->
				<RegexPatternGroup TokenKey="WhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
				<!-- Line Terminators -->
				<RegexPatternGroup TokenKey="LineTerminatorToken" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />
				<!-- Brackets -->
				<ExplicitPatternGroup Key="OpenParenthesisPatternGroup" TokenKey="OpenParenthesisToken" PatternValue="(" EndBracket="CloseParenthesisPatternGroup" />
				<ExplicitPatternGroup Key="CloseParenthesisPatternGroup" TokenKey="CloseParenthesisToken" PatternValue=")" StartBracket="OpenParenthesisPatternGroup" />
				<ExplicitPatternGroup TokenKey="GoToken" Style="GoStyle" LookAhead="{NonWordMacro}|\z">
					<ExplicitPatterns>
						GO
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Reserved Words -->
				<ExplicitPatternGroup TokenKey="ReservedWordToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}|\z">
					<ExplicitPatterns>
						IS AS OF
						FROM GROUP BY HAVING ORDER SELECT WHERE
						SKIP LIMIT COLLATE ASC DESC
						VALUE
						DISTINCT TOP
						CASE WHEN IF ELSE THEN END
						ANYELEMENT EXCEPT FLATTEN INTERSECT OVERLAPS SET UNION ALL
						MULTISET ROW
						TRUE FALSE
						ON						
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Functions -->
				<ExplicitPatternGroup TokenKey="FunctionToken" Style="FunctionStyle" LookAhead="{NonWordMacro}|\z">
					<ExplicitPatterns>
						AVG BIGCOUNT COUNT MAX MIN STDEV SUM
						ABS CEILING FLOOR ROUND
						CONCAT INDEXOF LENGTH LTRIM REPLACE REVERSE RTRIM SUBSTRING TOLOWER TOUPPER TRIM
						CURRENTDATETIME CURRENTDATETIMEOFFSET CURRENTUTCDATETIME DAY GETTOTALOFFSETMINUTES
						HOUR MILLISECOND MINUTE MONTH SECOND YEAR
						BITWISEAND BITWISENOT BITWISEOR BITWISEXOR
						NEWGUID
						NAVIGATE
						CREATEREF DEREF KEY REF
						OFTYPE ONLY CAST TREAT
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Operators -->
				<ExplicitPatternGroup TokenKey="OperatorToken" Style="OperatorStyle">
					<ExplicitPatterns>
						+ - * / % ~ &amp; | ^ = &gt; &lt; &gt;= &lt;= &lt;&gt; != !&gt; !&lt;
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<ExplicitPatternGroup TokenKey="OperatorToken" Style="OperatorStyle" LookAhead="{NonWordMacro}|\z">
					<ExplicitPatterns>
						ALL AND ANY BETWEEN EXISTS IN LEFT JOIN LIKE NOT OR INNER OUTER RIGHT SOME NULL
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Data Types -->
				<ExplicitPatternGroup TokenKey="DataTypeToken" Style="DataTypeStyle" LookAhead="{NonWordMacro}|\z">
					<ExplicitPatterns>
						
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Identifier -->
				<RegexPatternGroup TokenKey="IdentifierToken" PatternValue="{AlphaMacro}({WordMacro})*" />
				<!-- Variables -->
				<RegexPatternGroup TokenKey="VariableToken" Style="VariableStyle" PatternValue="@ {WordMacro}+" LookAhead="{NonWordMacro}|\z" />
				<!-- System Variables -->
				<RegexPatternGroup TokenKey="SystemVariableToken" Style="SystemVariableStyle" PatternValue="@@ {WordMacro}+" LookAhead="{NonWordMacro}|\z" />
				<!-- Numbers -->
				<RegexPatternGroup TokenKey="NumberToken" Style="NumberStyle" PatternValue="{DigitMacro}+ (\. {DigitMacro}+)?" LookAhead="{NonWordMacro}|\z" />
				<RegexPatternGroup TokenKey="HexNumberToken" Style="NumberStyle" PatternValue="0 [x | X] {HexDigitMacro}+" LookAhead="{NonWordMacro}|\z" />
			</PatternGroups>
			<!-- Child States -->
			<ChildStates>
				<ChildState Key="StringState" />
				<ChildState Key="SquareStringState" />
				<ChildState Key="CommentState" />
				<ChildState Key="MultiLineCommentState" />
			</ChildStates>
		</State>

		<!-- Strings -->
		<State Key="StringState" TokenKey="StringDefaultToken" Style="StringDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="StringStartToken" Style="StringDelimiterStyle" PatternValue="'" />
					<ExplicitPatternGroup Type="EndScope" TokenKey="StringEndToken" Style="StringDelimiterStyle" PatternValue="'" />
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="StringDefaultToken" PatternValue="[^']+" />
			</PatternGroups>
		</State>

		<!-- Square Strings -->
		<State Key="SquareStringState" TokenKey="SquareStringDefaultToken" Style="SquareStringDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="SquareStringStartToken" Style="SquareStringDelimiterStyle" PatternValue="[" />
					<ExplicitPatternGroup Type="EndScope" TokenKey="SquareStringEndToken" Style="SquareStringDelimiterStyle" PatternValue="]" />
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="SquareStringDefaultToken" PatternValue="[^\]]+" />
			</PatternGroups>
		</State>

		<!-- Comments -->
		<State Key="CommentState" TokenKey="CommentDefaultToken" Style="CommentDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<RegexPatternGroup Type="StartScope" TokenKey="RegionStartToken" Style="CommentDelimiterStyle" PatternValue="-- {WhitespaceMacro}* Region" LookAhead="{NonWordMacro}|\z" />
					<RegexPatternGroup Type="EndScope" TokenKey="CommentStringEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" />
				</Scope>
				<Scope>
					<RegexPatternGroup Type="StartScope" TokenKey="EndRegionStartToken" Style="CommentDelimiterStyle" PatternValue="-- {WhitespaceMacro}* End {WhitespaceMacro}? Region" LookAhead="{NonWordMacro}|\z" />
					<RegexPatternGroup Type="EndScope" TokenKey="CommentStringEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" />
				</Scope>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="CommentStartToken" Style="CommentDelimiterStyle" PatternValue="--" />
					<RegexPatternGroup Type="EndScope" TokenKey="CommentStringEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" />
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="CommentDefaultToken" PatternValue="{NonLineTerminatorMacro}+" />
			</PatternGroups>
		</State>

		<!-- MultiLine Comments -->
		<State Key="MultiLineCommentState" TokenKey="MultiLineCommentDefaultToken" Style="CommentDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope BracketHighlight="True">
					<ExplicitPatternGroup Type="StartScope" TokenKey="MultiLineCommentStartToken" Style="CommentDelimiterStyle" PatternValue="/*" />
					<ExplicitPatternGroup Type="EndScope" TokenKey="MultiLineCommentEndToken" Style="CommentDelimiterStyle" PatternValue="*/" />
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="MultiLineCommentDefaultToken" PatternValue="[^\*]+" />
			</PatternGroups>
		</State>
	</States>

</SyntaxLanguage>
